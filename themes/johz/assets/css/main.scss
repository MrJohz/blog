@font-face {
  font-family: Sen;
  src: url("/Sen-VariableFont_wght.woff2") format("woff2"),
    url("/Sen-VariableFont_wght.woff") format("woff");
}

:root {
  // yes, there's a bunch of duplication here that we would like to avoid
  // but it turns out to be surprisingly difficult to write a selector that:
  // * works on old browsers (&, &:has(...)) does not work on older browsers, even
  //   though they understand the first part of the selector
  // * covers both the body.dark case and the prefers-color-scheme: dark case
  // so for the time being, we just duplicate everything

  --main-background: #f3f8ff;
  --highlight-background: #afc1d6;
  --text-color: #092327;
  --article-color: #cef9f2;
  --link-deco-color: #ab92bf;
  --text-highlight-background: #fff5;
  color-scheme: light;

  &:has(body.light) {
    --main-background: #f3f8ff;
    --highlight-background: #afc1d6;
    --text-color: #092327;
    --article-color: #cef9f2;
    --link-deco-color: #ab92bf;
    --text-highlight-background: #fff5;
    color-scheme: light;
  }

  &:has(body.dark) {
    --main-background: #181e1f;
    --highlight-background: #07362f;
    --text-color: #e7eee5;
    --article-color: #202b2c;
    --link-deco-color: #6b0a34;
    --text-highlight-background: #fff2;
    color-scheme: dark;
  }

  @media (prefers-color-scheme: dark) {
    --main-background: #181e1f;
    --highlight-background: #07362f;
    --text-color: #e7eee5;
    --article-color: #202b2c;
    --link-deco-color: #6b0a34;
    --text-highlight-background: #fff2;
    color-scheme: dark;
  }

  --shadow-color: rgba(0, 0, 0, 0.4);
  font-size: 18px;
}

@mixin screen($size) {
  @if ($size == big) {
    @media screen and (min-width: 600px) {
      @content;
    }
  }
  @if ($size == small) {
    @media (max-width: 599px) {
      @content;
    }
  }
}

@mixin full-shadow($size) {
  box-shadow: 0 $size/2 10px 0px var(--shadow-color),
    $size / 3 $size / 3 $size 0px var(--shadow-color);
}

@mixin shadow($size) {
  box-shadow: $size/2 $size/2 10px 0px var(--shadow-color),
    $size * 0.75 $size * 0.75 $size 0px var(--shadow-color);
}

html,
body {
  display: flex;
  flex-direction: column;
  width: 100%;
}

body {
  background-color: var(--main-background);
  color: var(--text-color);
  align-items: center;
  padding-block: 1rem;
  gap: 1.5rem;

  font-family: "Sen", sans-serif;
  font-optical-sizing: auto;
  font-weight: 400;
  font-style: normal;

  @include screen(big) {
    padding-block: 3rem;
    gap: 3rem;
  }
}

.header {
  display: flex;
  flex-direction: column;
  margin-inline-end: 2rem;

  h1 {
    font-size: clamp(1.7rem, 6vw, 4rem);
    z-index: 2;

    width: max-content;
    background-color: var(--highlight-background);
    @include shadow(0.25rem);
    padding: 0.4em;

    &:has(a:hover) {
      background-color: var(--link-deco-color);
    }
  }

  nav {
    font-size: clamp(0.8rem, 2vw, 1.2rem);
    align-self: flex-end;
    width: max-content;
    background-color: var(--article-color);
    @include shadow(0.25rem);
    padding: 2.75em 1em 0.75em;
    margin-block-start: -2em;
    margin-inline-end: -1.5em;

    ul {
      display: flex;
      list-style: none;
      padding: 0;
      gap: 1rem;
    }
  }
}

main {
  display: contents;
}

article {
  @include screen(small) {
    @include full-shadow(0.25rem);
    width: 100%;
  }
  @include screen(big) {
    @include shadow(0.25rem);
    width: calc(min(85%, 40rem));
  }
  background-color: var(--article-color);
  padding: 1.5rem 1.5rem 2rem;
  margin-block-start: 1.5rem;

  &:has(.cover) {
    margin-block-start: 0;
  }

  .cover {
    max-width: calc(100% + 3rem);
    height: auto;
    margin: -1.5rem;
    padding-block-end: 2.5rem;
  }

  header {
    @include shadow(0.25rem);
    background-color: var(--highlight-background);
    max-width: max-content;
    margin-block-start: -2.5rem;
    margin-inline-start: -1.9rem;
    padding: 0.5rem;
    padding-inline-start: 0.9rem;

    z-index: 5;
    position: relative;

    @include screen(big) {
      margin-inline-start: -4rem;
    }

    &:has(a:hover) {
      background-color: var(--link-deco-color);
    }
  }

  .details {
    font-size: 0.8em;
    margin-block-start: var(--flow-space, 1em);
    opacity: 0.8;
  }

  .toc {
    summary {
      font-weight: bold;
      cursor: pointer;

      & + * {
        margin-block-start: 0.5em;
      }
    }

    --flow-space: 0.5em;
    @include screen(small) {
      &.desktop {
        display: none;
      }
    }
    @include screen(big) {
      &.mobile {
        display: none;
      }
      @include shadow(0.25rem);
      width: 18rem;
      float: right;
      margin: 1rem;
      margin-block-start: 0;
      margin-inline-end: -4rem;
      background-color: var(--highlight-background);
      padding: 1rem;
    }
  }

  .content {
    &,
    & > * + *,
    & blockquote > * + *,
    & li > * + * {
      margin-block-start: var(--flow-space, 1.5em);
    }

    ul,
    ol {
      padding-inline-start: 1em;
      & > li:not(:first-of-type) {
        padding-block-start: 0.5em;
        &:has(p) {
          padding-block-start: 1em;
        }
      }
    }

    blockquote {
      position: relative;
      margin-inline: 0em;
      padding-block: 0.5em;

      & > blockquote,
      & > ul,
      & > li {
        margin-inline-start: 1.5em;
      }

      & pre {
        margin-inline-start: -0.6em;
      }

      &::before {
        content: "";
        display: block;
        position: absolute;
        top: 0;
        height: 100%;
        width: 0.25em;
        background-color: var(--text-color);
        left: calc(-1em + 3px);
      }
    }

    pre {
      overflow-x: auto;
      margin-inline: -1.5em;
      padding-block: 1.5em;
      padding-inline: 2em;
      background-color: var(--text-highlight-background);

      code {
        background-color: unset;
      }
    }

    table {
      display: block;
      margin-inline: -1.5em;
      width: calc(100% + 3em);
      overflow-x: auto;

      border-top: 0.25em solid var(--text-color);
      border-bottom: 0.25em solid var(--text-color);
      background-color: var(--text-highlight-background);

      // This is a clever, ugly hack:
      // * Initially, use a `:has()` declaration to hide all `th` cells
      //   -- this ensures that browsers that don't support `:has()` will
      //   ignore this declaration and treat th cells as normal
      // * Then, use :has(th:not(:empty)) to select all thead elements that
      //   have at least one non-empty head cell.  Revert these to using
      //   `table-cell` display
      // The result should be the following:
      // * for browsers that don't support `:has`, tables are rendered as per default
      // * for other browsers, for each table:
      //   * if there is at least one `th` with content, all `th`s will be displayed
      //   * otherwise, no `th`s will displayed
      thead:has(th) th {
        display: none;
      }

      thead:has(th:not(:empty)) th {
        display: table-cell;
      }

      thead th,
      tbody td {
        padding-block: 0.5em;
        padding-inline: 0.5em;

        text-wrap: pretty;
        hanging-punctuation: first force-end last;

        &:first-child {
          padding-inline-start: 1.5em;
        }

        &:last-child {
          padding-inline-end: 1.5em;
        }
      }
    }

    p {
      text-wrap: pretty;
      hanging-punctuation: first force-end last;
    }

    h2 {
      font-size: 1.3rem;
    }
    h3 {
      font-size: 1.1rem;
    }
    h4 {
      font-size: 1rem;
    }

    :is(h2, h3, h4) {
      @include shadow(0.25rem);
      background-color: var(--highlight-background);
      max-width: max-content;
      margin-inline-start: -1.9rem;
      padding: 0.5em;
      padding-inline-start: 0.9rem;

      --flow-space: 2em;

      @include screen(big) {
        margin-inline-start: -2.5rem;
      }

      &:has(a:hover) {
        background-color: var(--link-deco-color);
      }

      a {
        color: inherit;
        text-decoration: inherit;
      }
    }
  }
}

code {
  background-color: var(--text-highlight-background);
}

nav a,
.content a,
.details a,
.footer a,
#share {
  color: var(--text-color);
  text-decoration: underline;
  text-decoration-color: var(--link-deco-color);
  text-decoration-thickness: 0.2em;
  text-decoration-skip-ink: none;
  transition: text-decoration-thickness 75ms, text-underline-offset 75ms;
  text-underline-offset: 0;
  &:hover {
    text-decoration-thickness: calc(1em + 0.2em);
    text-underline-offset: calc(-1em);
  }
}

.tags {
  --flow-space: 0.5em;
  margin-inline-start: 1em;
  opacity: 0.8;
  font-size: 0.9em;
}

.footer {
  text-align: center;
  & + & {
    margin-block-start: 0.5em;
  }
}

// share logic

.show-on-share {
  display: none;
  .share-enabled & {
    display: unset;
  }
}

.share-enabled .hide-on-share {
  display: none;
}

#share {
  display: unset;
  border: unset;
  padding: unset;
  background: unset;
  cursor: pointer;
}

.email {
  .hidden {
    display: none;
  }
}
